<div class="panel panel-info">
  <div class="panel-heading" >
  </div>
  <div class="panel-body">
    <div class="well">
     <%= form_for @item, html: { multipart: true } do |f| %>
     <% if @item.errors.any? %>
     <div id="error_explanation">
       <h2>
         <%= pluralize(@item.errors.count, "error") %> prohibited
         this item from being saved:
       </h2>                                       
       <ul>
         <% @item.errors.full_messages.each do |msg| %>
         <li><%= msg %></li>
         <% end %>
       </ul>
     </div>
     <% end %>
     <table>
      <div class="form-group">
       <p>
        <%=f.label :item_list, :class => 'control-label col-lg-2' %><br>
        <%#= form.text_field :item_list, :class => 'form-control' %>
        <%= f.select(:item_list, [ 'Property Rental', 'Property Sale', 'New Launch', 'Food & Beverage' ], {}, { :class => 'select' }) %>
      </p>
      <p>
        <%= f.label :list, :class => 'control-label' %><br>
        <%= f.select(:list, [ 'Serangoon', 'Geylang', 'Buona Vista', 'Jurong east' ], {}, { :class => 'select' }) %>
      </p>
      <p>
        <%= f.label :item_img, :class => 'control-label col-lg-2' %><br>
        <%= f.file_field "item_img[]", type: :file, multiple: true %>

      </p>
      <p>
        <%= f.label :item_title, :class => 'control-label col-lg-2' %><br>
        <%= f.text_field :item_title, :class => 'form-control' %>
      </p>
      <p>
        <%= f.label :price, :class => 'control-label col-lg-2' %>
        <%= f.text_field :price, :class => "form-control" %></p>
        <p>
          <%= f.label :tips, :class => 'control-label col-lg-2' %>
          <%= f.text_field :tips, :class => "form-control", id: "autocomplete", placeholder: "Enter your address", 
          onFocus: "geolocate()"  %></p>
          <div id="tasks">
           <%=f.fields_for :images do |image|%>
           <%=render 'image_fields', f: image %>
           <% end %>
           <div class="links">
            <%=link_to_add_association 'add image ', f, :images%>
          </div>
        </div>
        <div class="col-md-5" style="margin-left: 25%">
         <%= f.submit 'submit', :class => 'btn btn-success btn btn-block'  %>
       </div>
       <br>
       <br>
       <div class="col-md-5" style="margin-left: %">
         <%= link_to 'Back', items_path, :class => 'btn btn-info ' %>
       </div>
     </div>
   </table>
 </table>
 <% end %>
</div>
</div>
<script>

  var placeSearch, autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSV4O02OnVl5soFtM15lVYmmU0WHbH3sM&libraries=places&callback=initAutocomplete"
    async defer></script>
